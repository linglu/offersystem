package com.linky.offersystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.linky.offersystem.bean.OfferItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OFFER_ITEM_BEAN".
*/
public class OfferItemBeanDao extends AbstractDao<OfferItemBean, Long> {

    public static final String TABLENAME = "OFFER_ITEM_BEAN";

    /**
     * Properties of entity OfferItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Channel = new Property(1, int.class, "channel", false, "CHANNEL");
        public final static Property Country = new Property(2, int.class, "country", false, "COUNTRY");
        public final static Property Weight = new Property(3, double.class, "weight", false, "WEIGHT");
        public final static Property Price = new Property(4, double.class, "price", false, "PRICE");
        public final static Property FuelRate = new Property(5, double.class, "fuelRate", false, "FUEL_RATE");
        public final static Property SubCharge = new Property(6, double.class, "subCharge", false, "SUB_CHARGE");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
    };


    public OfferItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OfferItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OFFER_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHANNEL\" INTEGER NOT NULL ," + // 1: channel
                "\"COUNTRY\" INTEGER NOT NULL ," + // 2: country
                "\"WEIGHT\" REAL NOT NULL ," + // 3: weight
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"FUEL_RATE\" REAL NOT NULL ," + // 5: fuelRate
                "\"SUB_CHARGE\" REAL NOT NULL ," + // 6: subCharge
                "\"REMARK\" TEXT);"); // 7: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OFFER_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OfferItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChannel());
        stmt.bindLong(3, entity.getCountry());
        stmt.bindDouble(4, entity.getWeight());
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindDouble(6, entity.getFuelRate());
        stmt.bindDouble(7, entity.getSubCharge());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OfferItemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChannel());
        stmt.bindLong(3, entity.getCountry());
        stmt.bindDouble(4, entity.getWeight());
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindDouble(6, entity.getFuelRate());
        stmt.bindDouble(7, entity.getSubCharge());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OfferItemBean readEntity(Cursor cursor, int offset) {
        OfferItemBean entity = new OfferItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // channel
            cursor.getInt(offset + 2), // country
            cursor.getDouble(offset + 3), // weight
            cursor.getDouble(offset + 4), // price
            cursor.getDouble(offset + 5), // fuelRate
            cursor.getDouble(offset + 6), // subCharge
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OfferItemBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChannel(cursor.getInt(offset + 1));
        entity.setCountry(cursor.getInt(offset + 2));
        entity.setWeight(cursor.getDouble(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
        entity.setFuelRate(cursor.getDouble(offset + 5));
        entity.setSubCharge(cursor.getDouble(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OfferItemBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OfferItemBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
